generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @unique
  name     String
  email    String  @unique
  imageUrl String
  phone    String?
  address  String?
  isAdmin  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
  orders    Order[]
  reviews   Review[]
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  quantity Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String @db.ObjectId
}

model Food {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  slug        String @unique
  category    String
  photo       String
  description String

  price     Float
  reviews   Review[]
  avgRating Float    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Review {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  star    Float
  comment String
  food    Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId  String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  status OrderStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  orderItems OrderItem[]
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  quantity Int

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @db.ObjectId

  food   Food   @relation(fields: [foodId], references: [id])
  foodId String @db.ObjectId
}

model StripeCustomer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  DELIVERY_PENDING
  DELIVERED
  CANCELED
}
